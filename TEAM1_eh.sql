SELECT USER
FROM DUAL;
------------------
SELECT *
FROM QUESTION;

DESC QUESTION;
/*
이름          널?       유형            
----------- -------- ------------- 
QUESTION_ID NOT NULL VARCHAR2(30)  
E_TYPE_ID   NOT NULL VARCHAR2(30)  
Q_CONTENT   NOT NULL VARCHAR2(100) 
POINT       NOT NULL NUMBER        
*/

--QUESTION테이블 시퀀스 생성 SEQ_QUESTION
CREATE SEQUENCE SEQ_QUESTION
NOCACHE;
--Sequence SEQ_QUESTION이(가) 생성되었습니다.

COMMIT;

--EVALUATE_TYPE테이블 시퀀스 생성 SEQ_EVALUATE_TYPE
CREATE SEQUENCE SEQ_EVALUATE_TYPE
NOCACHE;
--Sequence SEQ_EVALUATE_TYPE이(가) 생성되었습니다.

COMMIT;


DESC EVALUATE_TYPE;

--EVALUATE_TYPE테이블 데이터 입력
INSERT INTO EVALUATE_TYPE(E_TYPE_ID, E_TYPE_NAME)
VALUES (SEQ_EVALUATE_TYPE.NEXTVAL, '리더십 점수');

INSERT INTO EVALUATE_TYPE(E_TYPE_ID, E_TYPE_NAME)
VALUES (SEQ_EVALUATE_TYPE.NEXTVAL, '매너 점수');

INSERT INTO EVALUATE_TYPE(E_TYPE_ID, E_TYPE_NAME)
VALUES (SEQ_EVALUATE_TYPE.NEXTVAL, '체력 점수');

-- 확인
SELECT *
FROM EVALUATE_TYPE;
/*
1	리더십 점수
2	매너 점수
3	체력 점수
*/

COMMIT;

-- QUESTION 테이블 데이터 입력
INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 2 , '가장 친절한 사람은 누구인가요?', 1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 2 , '가장 불친절한 사람은 누구인가요?', -1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 2 , '위험하게 라이딩한 사람은 누구인가요?', -1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 1 , 'GOOD', 1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 1 , 'SOSO', 0);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 1 , 'BAD', -1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 3 , '완주하지 못한 사람은 누구인가요?', -1);

INSERT INTO QUESTION(QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT)
VALUES(SEQ_QUESTION.NEXTVAL, 3 , '실제 난이도에 못 미친 사람은 누구인가요?', -1);

-- 확인
SELECT QUESTION_ID, E_TYPE_ID, Q_CONTENT, POINT
FROM QUESTION;

DESC QUESTION;
/*
1	2	가장 친절한 사람은 누구인가요?	1
2	2	가장 불친절한 사람은 누구인가요?	-1
3	2	위험하게 라이딩한 사람은 누구인가요?	-1
4	1	GOOD	1
5	1	SOSO	0
6	1	BAD	-1
7	3	완주하지 못한 사람은 누구인가요?	-1
8	3	실제 난이도에 못 미친 사람은 누구인가요?	-1
*/

COMMIT;

-- 바티스 활용(질문 문항들 가져오기)
SELECT Q_CONTENT
FROM QUESTION;
--> 한 줄 구성
SELECT Q_CONTENT FROM QUESTION


-- 시퀀스 필요
SELECT *
FROM EVALUATION_GRADE;

SELECT *
FROM CONTRIBUTION_GRADE;

----------------시퀀스 생성
CREATE SEQUENCE SEQ_EVALUATION_GRADE
NOCACHE;
-- Sequence SEQ_EVALUATION_GRADE이(가) 생성되었습니다.
CREATE SEQUENCE SEQ_CONTRIBUTION_GRADE
NOCACHE;
-- Sequence SEQ_CONTRIBUTION_GRADE이(가) 생성되었습니다.

--------------- 데이터입력
DESC EVALUATION_GRADE;
INSERT INTO EVALUATION_GRADE(E_GRADE_ID, GRADE_NAME)
VALUES(SEQ_EVALUATION_GRADE.NEXTVAL, '다이아전거');
INSERT INTO EVALUATION_GRADE(E_GRADE_ID, GRADE_NAME)
VALUES(SEQ_EVALUATION_GRADE.NEXTVAL, '금전거');
INSERT INTO EVALUATION_GRADE(E_GRADE_ID, GRADE_NAME)
VALUES(SEQ_EVALUATION_GRADE.NEXTVAL, '은전거');
INSERT INTO EVALUATION_GRADE(E_GRADE_ID, GRADE_NAME)
VALUES(SEQ_EVALUATION_GRADE.NEXTVAL, '동전거');
INSERT INTO EVALUATION_GRADE(E_GRADE_ID, GRADE_NAME)
VALUES(SEQ_EVALUATION_GRADE.NEXTVAL, '돌전거');

--확인
SELECT *
FROM EVALUATION_GRADE;
/*
1	다이아전거
2	금전거
3	은전거
4	동전거
5	돌전거
*/

DROP SEQUENCE SEQ_CONTRIBUTION_GRADE;



DESC CONTRIBUTION_GRADE;

INSERT INTO CONTRIBUTION_GRADE(C_GRADE_ID, GRADE_NAME)
VALUES(SEQ_CONTRIBUTION_GRADE.NEXTVAL, '다이아헬멧');
INSERT INTO CONTRIBUTION_GRADE(C_GRADE_ID, GRADE_NAME)
VALUES(SEQ_CONTRIBUTION_GRADE.NEXTVAL, '금헬멧');
INSERT INTO CONTRIBUTION_GRADE(C_GRADE_ID, GRADE_NAME)
VALUES(SEQ_CONTRIBUTION_GRADE.NEXTVAL, '은헬멧');
INSERT INTO CONTRIBUTION_GRADE(C_GRADE_ID, GRADE_NAME)
VALUES(SEQ_CONTRIBUTION_GRADE.NEXTVAL, '동헬멧');


SELECT *
FROM CONTRIBUTION_GRADE;

COMMIT;



--------------------------------------------------------------------------------
-- 마이페이지에서 보여주는 요소 
-- 회원프로필아이콘, 이메일, 닉네임
-- ================= ======= =======
--   PROFILE_IMG     PROFILE  PROFILE

-- 한마디, 매너등급,                     공헌도 등급
-- ======  ========                      =============
-- PROFILE  EVALUATION_GRADE               CONTRIBUTION_GRADE

SELECT *
FROM USER_TABLES;

SELECT *
FROM MEMBER;

SELECT *
FROM PROFILE
WHERE USER_ID=2;

SELECT *
FROM PROFILE_IMG;


SELECT *
FROM CONTRIBUTION_GRADE;


SELECT *
FROM EVALUATION_GRADE;

--------------------------------------------------------------------------------
-- 마이페이지에서 보여주는 요소 
-- 회원프로필아이콘, 이메일, 닉네임
-- ================= ======= =======
--   PROFILE_IMG     PROFILE  PROFILE

-- 한마디, 매너등급,                     공헌도 등급
-- ======  ========                      =============
-- PROFILE  EVALUATION_GRADE               CONTRIBUTION_GRADE


SELECT P.USER_ID AS USER_ID
    ,P.EMAIL AS EMAIL
    ,P.NICKNAME AS NICKNAME
    ,P.ONEWORD AS ONEWORD
    ,PI.PI_ADDRESS
FROM
(
    SELECT USER_ID ,EMAIL, NICKNAME
    , NVL(INTRODUCE,' ') AS ONEWORD
    , PIMG_ID
    FROM PROFILE
    WHERE USER_ID = 2
)P JOIN PROFILE_IMG PI
ON P.PIMG_ID = PI.PIMG_ID;

-- 마이페이지 뷰 생성
/*
CREATE OR REPLACE VIEW VIEW_MYPAGEMAIN
AS
SELECT P.USER_ID AS USER_ID
    ,P.EMAIL AS EMAIL
    ,P.NICKNAME AS NICKNAME
    ,P.ONEWORD AS ONEWORD
    ,PI.PI_ADDRESS
FROM
(
    SELECT USER_ID ,EMAIL, NICKNAME
    , NVL(INTRODUCE,' ') AS ONEWORD
    , PIMG_ID
    FROM PROFILE
    WHERE USER_ID = 2
)P JOIN PROFILE_IMG PI
ON P.PIMG_ID = PI.PIMG_ID;

-- 마이페이지 뷰 완성
SELECT USER_ID, EMAIL, NICKNAME, ONEWORD, PI_ADDRESS
FROM VIEW_MYPAGEMAIN;
*/
DROP VIEW VIEW_MYPAGEMAIN;

COMMIT;

-- 회원생성코드 받으면 SELECT 하는 프로시저 생성
-- EXEC PRC_MYPAGE_S('2')
-- !! 프로시저 안에서 SELECT 문은 커서 !! 
/*
CREATE OR REPLACE PROCEDURE PRC_MYPAGE_S
(V_USER_ID  IN MEMBER.USER_ID%TYPE)
IS
BEGIN
    SELECT P.USER_ID AS USER_ID
    ,P.EMAIL AS EMAIL
    ,P.NICKNAME AS NICKNAME
    ,P.ONEWORD AS ONEWORD
    ,PI.PI_ADDRESS
    FROM
    (
        SELECT USER_ID ,EMAIL, NICKNAME
        , NVL(INTRODUCE,' ') AS ONEWORD
        , PIMG_ID
        FROM PROFILE
        WHERE USER_ID = V_USER_ID
    )P JOIN PROFILE_IMG PI
    ON P.PIMG_ID = PI.PIMG_ID
END;
*/  
--------------------------------------------------------------------------------
-- 마이페이지에서 등급 보여주기 
-- 프로시저 만들기
-- 1. 평가기록 테이블 (EVALUATION_RECORD)
--    에서 참여한 회원정보ID


COMMIT;

--------------------------------------------------------------------------------
COMMIT;
-- 마이페이지에서 등급 보여주기 
-- 평가기록 테이블에서 점수 누적해서 if 문 돌리기
SELECT *
FROM EVALUATION_RECORD;
-- 시퀀스 생성
CREATE SEQUENCE SEQ_EVALUATION_RECORD
NOCACHE;
--Sequence SEQ_EVALUATION_RECORD이(가) 생성되었습니다.

SELECT *
FROM RIDING;
-- 시퀀스 생성
CREATE SEQUENCE SEQ_RIDING
NOCACHE;
--Sequence SEQ_RIDING이(가) 생성되었습니다.

SELECT *
FROM PARTICIPATED_MEMBER;

--시퀀스 생성
CREATE SEQUENCE SEQ_PARTICIPATED_MEMBER
NOCACHE;
--Sequence SEQ_PARTICIPATED_MEMBER이(가) 생성되었습니다.


COMMIT;

DESC USER_SEQUENCES;

SELECT *
FROM USER_SEQUENCES
WHERE SEQUENCE_NAME = 'SEQ_RIDING';

--------------------------------------------------------------------------------
-- 마이페이지에서 등급 보여주기 
-- 평가기록 테이블에서 점수 누적해서 if 문 돌리기
DESC PARTICIPATED_MEMBER;

SELECT P_MEMBER_ID
FROM PARTICIPATED_MEMBER
WHERE USER_ID = '2';

DESC EVALUATION_RECORD;

SELECT P_MEMBER_ID, 
FROM EVALUATION_RECORD
WHERE P_MEMBER_ID = (SELECT P_MEMBER_ID
                     FROM PARTICIPATED_MEMBER
                     WHERE USER_ID = '2');
                     
        

-----------------------------------------------------------------
-- 참여중인 라이딩 스타일 조회
-- 다인모임ID / 모임명 / 기간 / 모임상태 /
-- RIDING       RIDING   RIDING   RIDING  

DESC RIDING;

SELECT SYSDATE-48
FROM DUAL;

SELECT RIDING_ID, RIDING_NAME
    ,(START_DATE || END_DATE) AS DATE
    ,CASE WHEN START_DATE <= SYSDATE-48
FROM RIDING;


--------------------------------------------------------------------------------
--MYPAGEVIEW 생성
CREATE OR REPLACE VIEW VIEW_MYPAGEMAIN
AS
SELECT P.USER_ID AS USER_ID
    ,P.EMAIL AS EMAIL
    ,P.NICKNAME AS NICKNAME
    ,P.ONEWORD AS ONEWORD
    ,PI.PI_ADDRESS
FROM
(
    SELECT USER_ID ,EMAIL, NICKNAME
    , NVL(INTRODUCE,' ') AS ONEWORD
    , PIMG_ID
    FROM PROFILE
)P JOIN PROFILE_IMG PI
ON P.PIMG_ID = PI.PIMG_ID;
--View VIEW_MYPAGEMAIN이(가) 생성되었습니다.

--테스트
SELECT USER_ID,EMAIL,NICKNAME,ONEWORD,PI_ADDRESS
FROM VIEW_MYPAGEMAIN
WHERE USER_ID = '2';


COMMIT;

-----------------------------------------------------------------
-- 참여중인 라이딩 스타일 조회
-- 다인모임ID / 모임명 / 기간 / 모임상태 /
-- RIDING       RIDING   RIDING   RIDING  

DESC RIDING;

SELECT TO_DATE('2022-06-20 14:00:00','YYYY-MM-DD HH24:MI:SS') - 49/24
FROM DUAL;

SELECT RIDING_ID, RIDING_NAME
    ,(START_DATE || END_DATE) AS PERIOD
    ,CASE WHEN SYSDATE <= TO_DATE(START_DATE,'YYYY-MM-DD HH24:MI:SS') - 49/24 THEN '모임참가가능'
          WHEN SYSDATE <= TO_DATE(START_DATE,'YYYY-MM-DD HH24:MI:SS') - 48/24 THEN '준비요청기간'
          WHEN SYSDATE <= START_DATE THEN '준비요청기간'
          ELSE '알수없음'
          END STATUS
FROM RIDING;

CREATE OR REPLACE VIEW VIEW_PARTICIRIDING_LIST
AS
SELECT RIDING_ID, RIDING_NAME
    ,(START_DATE || END_DATE) AS PERIOD
    ,CASE WHEN SYSDATE <= TO_DATE(START_DATE,'YYYY-MM-DD HH24:MI:SS') - 49/24 THEN '모임참가가능'
          WHEN SYSDATE <= TO_DATE(START_DATE,'YYYY-MM-DD HH24:MI:SS') - 48/24 THEN '준비요청기간'
          WHEN SYSDATE <= START_DATE THEN '준비요청기간'
          ELSE '알수없음'
          END STATUS
FROM RIDING;

SELECT RIDING_ID, RIDING_NAME,PERIOD,STATUS
FROM VIEW_PARTICIRIDING_LIST;

COMMIT;

--------------------------------------------------------------------------------
--라이딩평가에서 문항가져오기    QUESTION    Q_CONTENT
SELECT Q_CONTENT
FROM QUESTION;

DESC QUESTION;
INSERT INTO QUESTION
VALUES(SEQ_QUESTION.NEXTVAL, 

--작성자 닉네임가져오기      
SELECT NICKNAME
FROM PROFILE
WHERE USER_ID=2;

-- 00 참여자가 참여한 라이딩 모임의 이름 알아오기
--모임이름 가져오기             ANSWER_DETAIL   
SELECT RIDING_NAME
FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
ON P.USER_ID = PM.USER_ID
ON PM.RIDING_ID = R.RIDING_ID
WHERE P.USER_ID = 2;

-- 00모임의 참여자명단 가져오기(닉네임으로)
SELECT PM.USER_ID AS USER_ID
    ,P.NICKNAME AS NICKNAME
FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
ON PM.USER_ID = P.USER_ID
WHERE RIDING_ID = (SELECT RIDING_ID
                   FROM RIDING
                   WHERE RIDING_ID = 100);
                   
                   
DESC RIDING;

SELECT *
FROM RIDING;


--------------------------------------------------------------------------------
-- 라이딩 모임 데이터 입력
/*
이름             널?       유형            
-------------- -------- ------------- 
RIDING_ID      NOT NULL VARCHAR2(30)  
LEADER_ID      NOT NULL VARCHAR2(30)  
STEP_ID        NOT NULL NUMBER(1)     
SPEED_ID       NOT NULL NUMBER(1)     
MOOD_P_ID      NOT NULL NUMBER(1)     
DINING_P_ID    NOT NULL NUMBER(1)     
EAT_P_ID       NOT NULL NUMBER(1)     
AGE_P_ID       NOT NULL CHAR(1)       
SEX_P_ID       NOT NULL CHAR(1)       
E_GRADE_ID     NOT NULL NUMBER(1)     
RIDING_NAME    NOT NULL VARCHAR2(300) 
START_DATE     NOT NULL DATE          
END_DATE       NOT NULL DATE          
CREATED_DATE   NOT NULL DATE          
MAXIMUM        NOT NULL NUMBER(1)     
MEET_LATI      NOT NULL VARCHAR2(500) 
MEET_LONGI     NOT NULL VARCHAR2(500) 
MEET_ADDRESS   NOT NULL VARCHAR2(500) 
MEET_DETAIL    NOT NULL VARCHAR2(500) 
START_LATI     NOT NULL VARCHAR2(500) 
START_LONGI    NOT NULL VARCHAR2(500) 
START_ADDRESS  NOT NULL VARCHAR2(500) 
START_DETAIL   NOT NULL VARCHAR2(500) 
END_LATI       NOT NULL VARCHAR2(500) 
END_LONGI      NOT NULL VARCHAR2(500) 
END_ADDRESS    NOT NULL VARCHAR2(500) 
DETAIL_ADDRESS NOT NULL VARCHAR2(500) 
CONFIRM_DATE            DATE
*/

SELECT *
FROM USER_SEQUENCES;

INSERT INTO RIDING
VALUES(SEQ_RIDING.NEXTVAL, '2'
    , 1,1,1,1,1,'0','0',1
    ,'달려라'
    ,TO_DATE('2022-07-07','YYYY-MM-DD'),TO_DATE('2022-07-09','YYYY-MM-DD')
    ,SYSDATE,4
    ,'1234','1234','홍대입구역','탐앤탐스'
    ,'5678','5678','한강','한강gs앞'
    ,'1010','1010','풍성빌딩','풍성빌딩4층',NULL);

SELECT *
FROM SEX_PREFERENCE;

SELECT *
FROM RIDING;

SELECT *
FROM PARTICIPATED_MEMBER;

COMMIT;

INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'2','1',SYSDATE);


COMMIT;



-- 00모임의 참여자명단 가져오기(닉네임으로)
SELECT PM.USER_ID AS USER_ID
    ,P.NICKNAME AS NICKNAME
FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
ON PM.USER_ID = P.USER_ID
WHERE RIDING_ID = (SELECT RIDING_ID
                   FROM RIDING
                   WHERE RIDING_ID = 1);
                   
COMMIT;



INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'2','1',SYSDATE);

SELECT *
FROM MEMBER;
/*
10
11
12
13
14
15
*/

INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'10','1',SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'11','1',SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'12','1',SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'13','1',SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'14','1',SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL,'15','1',SYSDATE);

SELECT *
FROM PARTICIPATED_MEMBER;

COMMIT;

SELECT P.NICKNAME AS NICKNAME
		FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
		ON PM.USER_ID = P.USER_ID
		WHERE RIDING_ID = (SELECT RIDING_ID
		                   FROM RIDING
		                   WHERE RIDING_ID = 1);
                           
SELECT P.NICKNAME AS NICKNAME
FROM PARTICIPATED_MEMBER PM JOIN PROFILE P JOIN RIDING R
ON PM.USER_ID = P.USER_ID
ON R.RIDING_ID = PM.RIDING_ID;

SELECT USER_ID
FROM PROFILE
WHERE USER_ID = 10;

SELECT USER_ID
FROM PARTICIPATED_MEMBER;



SELECT P.USER_ID
FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
ON PM.USER_ID = P.USER_ID;

        
                           
                           

