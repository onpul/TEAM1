--○ 제약 조건
ALTER TABLE "REVIEW_REPORT_PROCESS" ADD CONSTRAINT "FK_MEM_REV_RE_PROC" FOREIGN KEY (
	"ADMIN_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "REVIEW_REPORT_PROCESS"이(가) 변경되었습니다.

ALTER TABLE "REVIEW_REPORT_PROCESS" ADD CONSTRAINT "FK_PROC_STA_REV_RE_PROC" FOREIGN KEY (
	"PROC_STATUS_ID"
)
REFERENCES "REPORT_PROCESS_STATUS" (
	"REPORT_STATUS_ID"
);
--==>> Table "REVIEW_REPORT_PROCESS"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT" ADD CONSTRAINT "FK_MEMBER_TO_RESTAURANT_1" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "RESTAURANT_DELETE_REQ" ADD CONSTRAINT "FK_RESTAURANT_DEL_REQ" FOREIGN KEY (
	"RESTAURANT_ID"
)
REFERENCES "RESTAURANT" (
	"RESTAURANT_ID"
);
--==>> Table "RESTAURANT_DELETE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_DELETE_REQ" ADD CONSTRAINT "FK_MEMBER_RESTAURANT_DEL_REQ" FOREIGN KEY (
	"REQ_USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "RESTAURANT_DELETE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_DELETE_REQ" ADD CONSTRAINT "FK_MEMBER_RESTAURANT_DEL_REQ_2" FOREIGN KEY (
	"ADMIN_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "RESTAURANT_DELETE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_UPDATE_REQ" ADD CONSTRAINT "FK_RESTAURANT_UP_REQ" FOREIGN KEY (
	"RESTAURANT_ID"
)
REFERENCES "RESTAURANT" (
	"RESTAURANT_ID"
);
--==>> Table "RESTAURANT_UPDATE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_UPDATE_REQ" ADD CONSTRAINT "FK_MEMBER_RESTAURANT_UP_REQ_1" FOREIGN KEY (
	"REQ_USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "RESTAURANT_UPDATE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_UPDATE_REQ" ADD CONSTRAINT "FK_MEMBER_RESTAURANT_UP_REQ_2" FOREIGN KEY (
	"ADMIN_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "RESTAURANT_UPDATE_REQ"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_REVIEW" ADD CONSTRAINT "FK_RESTAURANT_REVIEW" FOREIGN KEY (
	"RESTAURANT_ID"
)
REFERENCES "RESTAURANT" (
	"RESTAURANT_ID"
);
--==>> Table "RESTAURANT_REVIEW"이(가) 변경되었습니다.

ALTER TABLE "RESTAURANT_REVIEW" ADD CONSTRAINT "FK_MEMBER_RESTAURANT_REVIEW" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "RESTAURANT_REVIEW"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPATED_MEMBER" ADD CONSTRAINT "FK_MEMBER_PARTICIPATED_MEMBER" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "PARTICIPATED_MEMBER"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPATED_MEMBER" ADD CONSTRAINT "FK_RIDING_PARTICIPATED_MEMBER" FOREIGN KEY (
	"RIDING_ID"
)
REFERENCES "RIDING" (
	"RIDING_ID"
);
--==>> Table "PARTICIPATED_MEMBER"이(가) 변경되었습니다.

ALTER TABLE "REVIEW_PENALTY" ADD CONSTRAINT "FK_PENALTY_TYPE_REVIEW_PENALTY" FOREIGN KEY (
	"PENALTY_TYPE_ID"
)
REFERENCES "PENALTY_TYPE" (
	"PENALTY_TYPE_ID"
);
--==>> Table "REVIEW_PENALTY"이(가) 변경되었습니다.

ALTER TABLE "REVIEW_PENALTY" ADD CONSTRAINT "FK_REVIEW_PENALTY" FOREIGN KEY (
	"RR_PROC_ID"
)
REFERENCES "REVIEW_REPORT_PROCESS" (
	"RR_PROC_ID"
);
--==>> Table "REVIEW_PENALTY"이(가) 변경되었습니다.

ALTER TABLE "INVITE" ADD CONSTRAINT "FK_MEMBER_TO_INVITE_1" FOREIGN KEY (
	"SENDER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "INVITE" ADD CONSTRAINT "FK_MEMBER_TO_INVITE_2" FOREIGN KEY (
	"RECEIVER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "INVITE" ADD CONSTRAINT "FK_RIDING_TO_INVITE_1" FOREIGN KEY (
	"RIDING_ID"
)
REFERENCES "RIDING" (
	"RIDING_ID"
);

ALTER TABLE "RIDING_POINT" ADD CONSTRAINT "FK_RIDING_TO_RIDING_POINT_1" FOREIGN KEY (
	"RIDING_ID"
)
REFERENCES "RIDING" (
	"RIDING_ID"
);

ALTER TABLE "RIDING_RECORD" ADD CONSTRAINT "FK_PART_MEMBER_RIDING_RECORD" FOREIGN KEY (
	"P_MEMBER_ID"
)
REFERENCES "PARTICIPATED_MEMBER" (
	"P_MEMBER_ID"
);
--==>> Table "RIDING_RECORD"이(가) 변경되었습니다.

ALTER TABLE "NICKNAME_CHANGE" ADD CONSTRAINT "FK_MEMBER_TO_NICKNAME_CHANGE_1" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_MEMBER_TO_PROFILE_1" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_MOOD_PREFERENCE_PROFILE" FOREIGN KEY (
	"MOOD_P_ID"
)
REFERENCES "MOOD_PREFERENCE" (
	"MOOD_P_ID"
);
--==>> Table "PROFILE"이(가) 변경되었습니다.

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_EAT_PREFERENCE_TO_PROFILE_1" FOREIGN KEY (
	"EAT_P_ID"
)
REFERENCES "EAT_PREFERENCE" (
	"EAT_P_ID"
);

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_PROFILE_IMG_TO_PROFILE_1" FOREIGN KEY (
	"PIMG_ID"
)
REFERENCES "PROFILE_IMG" (
	"PIMG_ID"
);

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_DINING_PREFERENCE_PROFILE" FOREIGN KEY (
	"DINING_P_ID"
)
REFERENCES "DINING_PREFERENCE" (
	"DINING_P_ID"
);
--==>> Table "PROFILE"이(가) 변경되었습니다.

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_SEX_PREFERENCE_TO_PROFILE_1" FOREIGN KEY (
	"SEX_P_ID"
)
REFERENCES "SEX_PREFERENCE" (
	"SEX_P_ID"
);

ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_AGE_PREFERENCE_TO_PROFILE_1" FOREIGN KEY (
	"AGE_P_ID"
)
REFERENCES "AGE_PREFERENCE" (
	"AGE_P_ID"
);

ALTER TABLE "EVALUATION_RECORD" ADD CONSTRAINT "FK_PART_MEM_EVALUATION_RECORD" FOREIGN KEY (
	"P_MEMBER_ID"
)
REFERENCES "PARTICIPATED_MEMBER" (
	"P_MEMBER_ID"
);
--==>> Table "EVALUATION_RECORD"이(가) 변경되었습니다.

ALTER TABLE "FACILITY_DELETE_REQ" ADD CONSTRAINT "FK_FACILITY_DELETE_REQ" FOREIGN KEY (
	"FACILITY_ID"
)
REFERENCES "FACILITY" (
	"FACILITY_ID"
);
--==>> Table "FACILITY_DELETE_REQ"이(가) 변경되었습니다.

ALTER TABLE "FACILITY_DELETE_REQ" ADD CONSTRAINT "FK_MEMBER_FACILITY_DELETE_REQ" FOREIGN KEY (
	"REQ_USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "FACILITY_DELETE_REQ" ADD CONSTRAINT "FK_MEMBER_FACILITY_DELETE_REQ" FOREIGN KEY (
	"ADMIN_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);

ALTER TABLE "PARTICIPANT_REPORT" ADD CONSTRAINT "FK_MEMBER_PARTICIPANT_REPORT" FOREIGN KEY (
	"USER_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "PARTICIPANT_REPORT"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_REPORT" ADD CONSTRAINT "FK_MEMBER_PARTICIPANT_REPORT2" FOREIGN KEY (
	"REPORTED_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "PARTICIPANT_REPORT"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_REPORT_PROCESS" ADD CONSTRAINT "FK_PART_REP_PART_REPORT_PROC" FOREIGN KEY (
	"PARTICI_R_ID"
)
REFERENCES "PARTICIPANT_REPORT" (
	"PARTICI_R_ID"
);
--==>> Table "PARTICIPANT_REPORT_PROCESS"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_REPORT_PROCESS" ADD CONSTRAINT "FK_MEMBER_PART_REPORT_PROCESS" FOREIGN KEY (
	"ADMIN_ID"
)
REFERENCES "MEMBER" (
	"USER_ID"
);
--==>> Table "PARTICIPANT_REPORT_PROCESS"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_REPORT_PROCESS" ADD CONSTRAINT "FK_REP_PROC_STA_PART_REP_PROC" FOREIGN KEY (
	"PROC_STATUS_ID"
)
REFERENCES "REPORT_PROCESS_STATUS" (
	"REPORT_STATUS_ID"
);
--==>> Table "PARTICIPANT_REPORT_PROCESS"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_PENALTY" ADD CONSTRAINT "FK_PENAL_TYPE_PART_PENAL" FOREIGN KEY (
	"PENALTY_TYPE_ID"
)
REFERENCES "PENALTY_TYPE" (
	"PENALTY_TYPE_ID"
);
--==>> Table "PARTICIPANT_PENALTY"이(가) 변경되었습니다.

ALTER TABLE "PARTICIPANT_PENALTY" ADD CONSTRAINT "FK_PARTT_REP_PROC_PART_PENAL" FOREIGN KEY (
	"PR_PROC_ID"
)
REFERENCES "PARTICIPANT_REPORT_PROCESS" (
	"PR_PROC_ID"
);
--==>> Table "PARTICIPANT_PENALTY"이(가) 변경되었습니다.

ALTER TABLE "ANSWER_DETAIL_LEADERSHIP" ADD CONSTRAINT "FK_ANSWER_DETAIL_LEADERSHIP" FOREIGN KEY (
	"ANSWER_ID"
)
REFERENCES "ANSWER" (
	"ANSWER_ID"
);
--==>> Table "ANSWER_DETAIL_LEADERSHIP"이(가) 변경되었습니다.

ALTER TABLE "ANSWER_DETAIL_LEADERSHIP" ADD CONSTRAINT "FK_QUE_ANS_DET_LEADERSHIP" FOREIGN KEY (
	"QUESTION_ID"
)
REFERENCES "QUESTION" (
	"QUESTION_ID"
);
--==>> Table "ANSWER_DETAIL_LEADERSHIP"이(가) 변경되었습니다.

ALTER TABLE "DELETED_RIDING" ADD CONSTRAINT "FK_RIDING_TO_DELETED_RIDING_1" FOREIGN KEY (
	"RIDING_ID"
)
REFERENCES "RIDING" (
	"RIDING_ID"
);

ALTER TABLE "ABSCOND" ADD CONSTRAINT "FK_PARTICIPATED_MEMBER_ABSCOND" FOREIGN KEY (
	"P_MEMBER_ID"
)
REFERENCES "PARTICIPATED_MEMBER" (
	"P_MEMBER_ID"
);
--==>> Table "ABSCOND"이(가) 변경되었습니다.

--------------------------------------------------------------------------------

--○ 초기화 용 DROP 구문
DROP SEQUENCE SEQ_MEMBER;

--○ 시퀀스 생성(MEMBER_SEQ)
CREATE SEQUENCE SEQ_MEMBER
NOCACHE;
--==>> Sequence SEQ_MEMBER이(가) 생성되었습니다.

--○ MEMBER_ACCESS 테이블 데이터 입력
INSERT INTO MEMBER_ACCESS(ACCESS_ID, ACCESS_TYPE)
VALUES(0, '관리자');
INSERT INTO MEMBER_ACCESS(ACCESS_ID, ACCESS_TYPE)
VALUES(1, '회원');
--==>> 1 행 이(가) 삽입되었습니다.

SELECT *
FROM MEMBER_ACCESS;

--○ MEMBER 테이블 데이터 입력
SELECT *
FROM MEMBER;

INSERT INTO MEMBER(USER_ID, ACCESS_ID, JOIN_DATE)
VALUES(SEQ_MEMBER.NEXTVAL, 0, SYSDATE);
--==>> 1 행 이(가) 삽입되었습니다.

--○ PROFILE 테이블 데이터 입력(관리자 등록)

--○ SEX_PREFERENCE(성별제한선호) 테이블 데이터 입력
INSERT INTO SEX_PREFERENCE(SEX_P_ID, SP_CONTENT)
VALUES(0, '제한 없음');
INSERT INTO SEX_PREFERENCE(SEX_P_ID, SP_CONTENT)
VALUES(1, '남성');
INSERT INTO SEX_PREFERENCE(SEX_P_ID, SP_CONTENT)
VALUES(2, '여성');
--==>> 1 행 이(가) 삽입되었습니다.

SELECT *
FROM SEX_PREFERENCE;

--○ AGE_PREFERENCE(연령제한선호) 테이블 데이터 입력
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(0, '제한 없음');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(1, '10대');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(2, '20대');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(3, '30대');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(4, '40대');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(5, '50대');
INSERT INTO AGE_PREFERENCE(AGE_P_ID, AP_CONTENT)
VALUES(6, '60대 이상');
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;

SELECT *
FROM AGE_PREFERENCE;

SELECT *
FROM EAT_PREFERENCE;

--○ EAT_PREFERENCE
INSERT INTO EAT_PREFERENCE(EAT_P_ID, EP_CONTENT)
VALUES(0, '제한 없음');
INSERT INTO EAT_PREFERENCE(EAT_P_ID, EP_CONTENT)
VALUES(1, '밥 안 먹고 달려요');
INSERT INTO EAT_PREFERENCE(EAT_P_ID, EP_CONTENT)
VALUES(2, '밥 먹고 달려요');
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;

--○ DINING_PREFERENCE
INSERT INTO DINING_PREFERENCE(DINING_P_ID, DP_CONTENT)
VALUES(0, '제한 없음');
INSERT INTO DINING_PREFERENCE(DINING_P_ID, DP_CONTENT)
VALUES(1, '끝나고 회식 안 해요');
INSERT INTO DINING_PREFERENCE(DINING_P_ID, DP_CONTENT)
VALUES(2, '끝나고 회식해요');
--==>> 1 행 이(가) 삽입되었습니다.

SELECT *
FROM MOOD_PREFERENCE;

COMMIT;

--○ MOOD_PREFERENCE
INSERT INTO MOOD_PREFERENCE(MOOD_P_ID, MP_CONTENT)
VALUES(0, '제한 없음');
INSERT INTO MOOD_PREFERENCE(MOOD_P_ID, MP_CONTENT)
VALUES(1, '침묵이 좋아요');
INSERT INTO MOOD_PREFERENCE(MOOD_P_ID, MP_CONTENT)
VALUES(2, '친목이 좋아요');
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;

--○ STEP
INSERT INTO STEP(STEP_ID, STEP_TYPE)
VALUES(0, '제한 없음');
INSERT INTO STEP(STEP_ID, STEP_TYPE)
VALUES(1, '1년 미만');
INSERT INTO STEP(STEP_ID, STEP_TYPE)
VALUES(2, '1~3년');
INSERT INTO STEP(STEP_ID, STEP_TYPE)
VALUES(3, '3~5년');
INSERT INTO STEP(STEP_ID, STEP_TYPE)
VALUES(4, '6년이상');
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;

SELECT *
FROM STEP;

--○ SPEED
INSERT INTO SPEED(SPEED_ID, SPEED_TYPE)
VALUES(0, '제한 없음');
INSERT INTO SPEED(SPEED_ID, SPEED_TYPE)
VALUES(1, '20미만');
INSERT INTO SPEED(SPEED_ID, SPEED_TYPE)
VALUES(2, '20이상 24미만');
INSERT INTO SPEED(SPEED_ID, SPEED_TYPE)
VALUES(3, '24이상');
--==>> 1 행 이(가) 삽입되었습니다.

SELECT * 
FROM SPEED;

SELECT *
FROM MEMBER;

COMMIT;

SELECT *
FROM PROFILE;

--○ 개인정보 테이블 시퀀스
CREATE SEQUENCE SEQ_PROFILE
NOCACHE;
--==>> Sequence SEQ_PROFILE이(가) 생성되었습니다.

--○ 프로필 사진
INSERT INTO PROFILE_IMG(PIMG_ID, PI_ADDRESS)
VALUES(1, '넣을 예정');
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;

--○ 기존 CHAR(1)에서 변경
ALTER TABLE PROFILE MODIFY PROFILE_ID NUMBER(1);

COMMIT;

SELECT *
FROM MEMBER;

--○ MEMBER 인서트
INSERT INTO MEMBER(USER_ID, ACCESS_ID, JOIN_DATE)
VALUES(SEQ_MEMBER.NEXTVAL, 1, SYSDATE);

ROLLBACK;

--○ PROFILE
INSERT INTO PROFILE(PROFILE_ID, USER_ID, MOOD_P_ID, EAT_P_ID, PIMG_ID, DINING_P_ID, SEX_P_ID, AGE_P_ID, EMAIL, BIRTHDAY, SEX, PASSWORD, NICKNAME)
VALUES(SEQ_PROFILE.NEXTVAL, 2, 0, 0, 1
     , 0, 0, 0, 'chmj072@gmail.com', '1999-07-02', 'f', 'overMoon99!', '온풀');
--==>> 1 행 이(가) 삽입되었습니다. 

SELECT *
FROM PROFILE_IMG;

SELECT *
FROM PROFILE;

SELECT *
FROM MEMBER
ORDER BY USER_ID;

SELECT MAX(TO_NUMBER(USER_ID))
FROM MEMBER;

SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME = 'PROFILE';

INSERT INTO PROFILE(PROFILE_ID, USER_ID, MOOD_P_ID, EAT_P_ID, PIMG_ID, DINING_P_ID, SEX_P_ID, AGE_P_ID, EMAIL, BIRTHDAY, SEX, PASSWORD, NICKNAME)
VALUES(SEQ_PROFILE.NEXTVAL, 3, 0, 0, 1, 0, 0, 0, '1', '1', '1', '1', '1');

--○ 왜 컬럼 데이터타입이 지 멋대로 바뀌었을까?
ALTER TABLE PROFILE MODIFY PROFILE_ID VARCHAR2(30);

COMMIT;

SELECT *
FROM WITHDRAW_USER;

--○ 탈퇴회원 시퀀스 생성
CREATE SEQUENCE SEQ_WITHDRAW
NOCACHE;

COMMIT;

SELECT *
FROM MEMBER;

SELECT *
FROM PROFILE
ORDER BY PROFILE_ID;

INSERT INTO PROFILE(PROFILE_ID, USER_ID, MOOD_P_ID, EAT_P_ID, PIMG_ID, DINING_P_ID, SEX_P_ID, AGE_P_ID, EMAIL, BIRTHDAY, SEX, PASSWORD, NICKNAME)
VALUES(SEQ_PROFILE.NEXTVAL, 2, 0, 0, 1
     , 0, 0, 0, 'chmj072@gmail.com', '1999-07-02', 'f', 'overMoon99!', '온풀');

INSERT INTO WITHDRAW_USER(WITHDRAW_ID, USER_ID, WITHDRAW_DATE)
VALUES(SEQ_WITHDRAW.NEXTVAL, 2, SYSDATE);

COMMIT;

-- 탈퇴 회원 찾기
SELECT COUNT(*)
FROM WITHDRAW_USER
WHERE USER_ID = (SELECT USER_ID
                 FROM PROFILE
                 WHERE EMAIL = 'chmj072@gmail.com' 
                   AND BIRTHDAY = '1999-07-02');
                   
SELECT COUNT(*) AS COUNT
FROM WITHDRAW_USER W JOIN PROFILE P
ON W.USER_ID = P.USER_ID
WHERE P.EMAIL = 'chmj072@gmail.com'
  AND P.BIRTHDAY = '1999-07-02'
  AND TRUNC(MONTHS_BETWEEN(SYSDATE, WITHDRAW_DATE)) < 3;

COMMIT;

SELECT COUNT(*)
FROM PROFILE
WHERE NICKNAME = 'aaa';

SELECT *
FROM PROFILE;

--------------------------------------------------------------------------------

--○ 로그인 처리 쿼리
SELECT COUNT(*)
FROM PROFILE
WHERE EMAIL = 'chmj072@gmail.com'
  AND PASSWORD = 'overMoon99!';

--○ 패널티 회원 처리 쿼리(사이트 이용 제한 회원은 로그인 안 되게)
SELECT *
FROM REVIEW_PENALTY;

--○ 맛집후기처리 테이블에서 신고 처리가 승인일 때
SELECT *
FROM REVIEW_REPORT_PROCESS
WHERE PROC_STATUS_ID = 1;

--○ 맛집후기 처리 테이블에서 신고 처리가 승인일 때
--   해당 게시글의 USER_ID SELECT
CREATE OR REPLACE VIEW VIEW_RIVIEW_PENALTY
AS
SELECT T.USER_ID
FROM
(
SELECT C.USER_ID, A.PROCESS_DATE
     , RANK() OVER (ORDER BY A.PROCESS_DATE DESC) AS RANK
FROM REVIEW_REPORT_PROCESS A JOIN REVIEW_REPORT B
ON A.REVIEW_R_ID = B.REVIEW_R_ID
JOIN RESTAURANT_REVIEW C
ON B.R_REVIEW_ID = C.R_REVIEW_ID
WHERE A.PROC_STATUS_ID = 1
ORDER BY A.PROCESS_DATE
) T
WHERE RANK = 1;

SELECT COUNT(*) AS COUNT
FROM VIEW_RIVIEW_PENALTY
WHERE USER_ID = 7;

--○ 허위 신고일 때 해당 신고의 USER_ID SELECT
--   1. 맛집후기 처리 테이블에서 신고 처리가 허위신고일 때
--      해당 신고의 USER_ID SELECT
SELECT *
FROM REVIEW_REPORT_PROCESS A JOIN REVIEW_REPORT B
ON A.REVIEW_R_ID = B.REVIEW_R_ID
WHERE PROC_STATUS_ID = 1 OR PROC_STATUS_ID = 2;


  CREATE OR REPLACE FORCE VIEW "TEAM1"."VIEW_REVIEW_REPORT" ("R_ID", "USER_ID", "NICKNAME", "REPORT_DATE", "STATUS", "REPORT_TYPE", "CONTENT", "REPORTED_USER_ID", "REVIEW_ID") AS 
  SELECT R_ID, USER_ID, NICKNAME, REPORT_DATE, STATUS, RESULT.REPORT_TYPE, CONTENT
, REPORTED_USER_ID, REVIEW_ID
FROM
(
SELECT R.REVIEW_R_ID AS R_ID
     , R.USER_ID AS USER_ID
     , PF.NICKNAME AS NICKNAME
     , RANK() OVER (PARTITION BY R.REVIEW_R_ID ORDER BY P.PROCESS_DATE DESC) AS RANK
     , R.REPORT_DATE AS REPORT_DATE
     , DECODE(P.PROC_STATUS_ID, 1, 'APPROVE', 2, 'PUNISH', 3, 'RETURN', 'WAIT') AS STATUS
     , 'REVIEW' AS REPORT_TYPE
     , R.CONTENT
     , V.USER_ID AS REPORTED_USER_ID
     , V.R_REVIEW_ID AS REVIEW_ID
FROM REVIEW_REPORT R, REVIEW_REPORT_PROCESS P, PROFILE PF, RESTAURANT_REVIEW V
WHERE R.REVIEW_R_ID = P.REVIEW_R_ID(+)
  AND R.USER_ID = PF.USER_ID(+)
  AND R.R_REVIEW_ID = V.R_REVIEW_ID
) RESULT
WHERE RESULT.RANK = 1;

SELECT *
FROM VIEW_REVIEW_REPORT;

SELECT COUNT(*) AS COUNT
FROM VIEW_REVIEW_REPORT
WHERE STATUS = 'APPROVE'
  AND USER_ID = '2'
  OR STATUS = 'PUNISH'
  AND USER_ID = '2';

SELECT *
FROM PROFILE
WHERE EMAIL='chmj072@gmail.com';

/*
25
74
78
26
28
29
30
31
32
33
34
27
*/

DELETE
FROM PROFILE
WHERE USER_ID = 27;

COMMIT;

--○ 알림 테이블
SELECT *
FROM NOTICE;

--○ 쪽지 테이블
SELECT *
FROM MESSAGE;

CREATE SEQUENCE SEQ_MESSAGE
NOCACHE;

INSERT INTO MESSAGE(MESSAGE_ID, SENDER_ID, RECEIVER_ID, CONTENT, SEND_DATE)
VALUES(SEQ_MESSAGE.NEXTVAL, 2, 82, '쪽지 개수 구현 중', SYSDATE);

SELECT COUNT(*) AS COUNT
FROM MESSAGE
WHERE RECEIVER_ID = 82;

COMMIT;

--○ 메인 모임 개수
SELECT *
FROM RIDING;

SELECT COUNT(*)
FROM RIDING
WHERE START_DATE = '2022-07-10';

SELECT COUNT(*)
FROM RIDING
WHERE END_DATE = '2022-07-10';

--○ 모임 생성 패널티 조회
SELECT COUNT(*)
FROM PARTICIPANT_REPORT A JOIN PARTICIPANT_REPORT_PROCESS B
ON A.PARTICI_R_ID = B.PARTICI_R_ID
WHERE PROC_STATUS_ID = 1
AND USER_ID = 2;

SELECT *
FROM PARTICIPANT_REPORT;

COMMIT;

--○ 모임 리스트 조회
SELECT *
FROM RIDING;

CREATE OR REPLACE VIEW VIEW_RIDING_LIST
AS
SELECT DISTINCT T.RIDING_ID, T.RIDING_NAME, T.MAXIMUM, T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) AS OPEN, T.START_DATE, T.END_DATE
FROM
(
SELECT A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, B.USER_ID
FROM RIDING A LEFT JOIN PARTICIPATED_MEMBER B
ON A.RIDING_ID = B.RIDING_ID
GROUP BY A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, B.USER_ID
)
T;

SELECT DISTINCT T.RIDING_ID, T.RIDING_NAME, T.MAXIMUM, T.MAXIMUM-COUNT(T.USER_ID) OVER(PARTITION BY RIDING_ID) AS OPEN, T.START_DATE, T.END_DATE
FROM
(
SELECT A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, B.USER_ID
FROM RIDING A LEFT JOIN PARTICIPATED_MEMBER B
ON A.RIDING_ID = B.RIDING_ID
GROUP BY A.RIDING_ID, A.RIDING_NAME, A.MAXIMUM, A.START_DATE, A.END_DATE, B.USER_ID
)
T;

--○ 라이딩 리스트 조회 기본 뷰
SELECT RIDING_ID, RIDING_NAME, MAXIMUM, OPEN, START_DATE, END_DATE
FROM VIEW_RIDING_LIST;


SELECT RIDING_ID, MAXIMUM
FROM RIDING;

SELECT *
FROM PARTICIPATED_MEMBER A RIGHT JOIN RIDING B
ON B.RIDING_ID = A.RIDING_ID;

SELECT *
FROM PARTICIPATED_MEMBER;

COMMIT;


