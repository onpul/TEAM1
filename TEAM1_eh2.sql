-- 3. 문항 가져오는 쿼리(참여자일 때는 리더십에 관한 문항 추가!)
--라이딩평가에서 문항가져오기    QUESTION    Q_CONTENT
SELECT QUESTION_ID , Q_CONTENT
FROM QUESTION
WHERE QUESTION_ID BETWEEN 1 AND 3 OR QUESTION_ID IN(7,8);


-- 5. 작성자 닉네임 가져오는 쿼리
--작성자 닉네임가져오기      
SELECT USER_ID,NICKNAME
FROM PROFILE
WHERE USER_ID=2;


-- 4. 모임명 가져오는 쿼리
-- 00 참여자가 참여한 라이딩 모임의 이름 알아오기
--모임이름 가져오기             ANSWER_DETAIL   
SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
ON P.USER_ID = PM.USER_ID
ON PM.RIDING_ID = R.RIDING_ID
WHERE P.USER_ID = 2;


-- 6. 참여자 명단 가져오는 쿼리
-- 00모임의 참여자명단 가져오기(닉네임으로)
SELECT PM.USER_ID AS USER_ID
    ,P.NICKNAME AS NICKNAME
FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
ON PM.USER_ID = P.USER_ID
WHERE RIDING_ID = '1';

-- 1. 평가기간인 모임이 있는지 SELECT USER_ID = 2 일때
--    종료시간 후, 
SELECT END_DATE +7 AS EVADATE
FROM RIDING
WHERE RIDING_ID = (SELECT RIDING_ID
                   FROM PARTICIPATED_MEMBER 
                   WHERE USER_ID = 2
                   );
    
    
-- 2. 방장인지 아닌지 체크하는 SELECT  USER_ID = 2 일때
---   0 이면 방장 아닌거임.
SELECT COUNT(*) AS LEADERCOUNT
FROM RIDING
WHERE LEADER_ID = 2;


-- 7. 이미 제출했는지 확인하는 쿼리
SELECT COUNT(*) AS ANSWERCOUNT
FROM PARTICIPATED_MEMBER PM JOIN ANSWER A
ON PM.P_MEMBER_ID = A.P_MEMBER_ID
WHERE PM.USER_ID = 2;

--------------------------------------------------------------------------------
-- 참여자테이블에서 user_id 로 id 찾기(P_MEMBER_ID 가 필요한 INSERT 액션 전에 처리하기)
SELECT P_MEMBER_ID
FROM PARTICIPATED_MEMBER
WHERE USER_ID = 2;

-- 1.ANSWER (응답) ANSWER_ID / P_MEMBER_ID / SUBMIT_DATE
INSERT INTO ANSWER (ANSWER_ID , P_MEMBER_ID , SUBMIT_DATE)
VALUES(SEQ_ANSWER.NEXTVAL, 1,SYSDATE);

-- 2.CHECK_ATTENDANCE(출석체크) / CHECK_ATTE_ID / P_MEMBER_ID / SUBMIT_DATE
--   평가지 제출과는 관계없이 결석자가 없으면 이 쿼리문은 실행되지 않는다.(P_MEMBER_ID 가 17인 사람은 결석자가 없음이라함.)
INSERT INTO CHECK_ATTENDANCE(CHECK_ATTE_ID , P_MEMBER_ID , SUBMIT_DATE)
VALUES(SEQ_CHECK_ATTENDANCE.NEXTVAL,1,SYSDATE);

-- USER_ID로 CHECK_ATTE_ID 찾기
-- 2번 ID 를 가진 작성자가 응답을 했고 , 출석체크도 했다.
-- 출석체크 아이디도 찾음
SELECT CHECK_ATTE_ID, USER_ID
FROM CHECK_ATTENDANCE CA JOIN PARTICIPATED_MEMBER PM
ON CA.P_MEMBER_ID = PM.P_MEMBER_ID
WHERE PM.USER_ID = 2;


-- 3.ANSWER_ATTENDANCE(출석체크응답내용) / ANSWER_ATTENDANCE / CHECK_ATTE_ID / P_MEMBER_ID(결석지목받은 사람)
INSERT INTO ANSWER_ATTENDANCE(ANS_ATTE_ID , CHECK_ATTE_ID , P_MEMBER_ID)
VALUES(SEQ_ANSWER_ATTENDANCE.NEXTVAL,3,16);


-- 4.ANSWER_DETAIL(응답내용) / ANS_DETAIL_ID / ANSWER_ID / QUESTION_ID / P_MEMBER_ID
INSERT INTO ANSWER_DETAIL(ANS_DETAIL_ID , ANSWER_ID , QUESTION_ID , P_MEMBER_ID)
VALUES(SEQ_ANSWER_DETAIL.NEXTVAL, 5,1,1);








-- 1. 평가기간인 모임이 있는지 SELECT USER_ID = 2 일때
--    종료시간 후, 
COMMIT;
SELECT CASE WHEN SYSDATE<= END_DATE +7 AND SYSDATE > START_DATE THEN 1
            ELSE 0
            END EVADATE
FROM RIDING
WHERE RIDING_ID = (SELECT RIDING_ID
                   FROM PARTICIPATED_MEMBER 
                   WHERE USER_ID = 2
                   );
-- 2. 방장인지 아닌지 체크하는 SELECT  USER_ID = 2 일때
---   0 이면 방장 아닌거임. LEADERCOUNT
SELECT CASE WHEN COUNT(*) = 0 THEN 'F'
            ELSE 'T'
            END LEADERCHECK
FROM RIDING
WHERE LEADER_ID = 2;


-- 7. 이미 제출했는지 확인하는 쿼리 ANSWERCOUNT
SELECT CASE WHEN COUNT(*) = 0 THEN 'F'
            ELSE 'T'
            END ANSWERCHECK
FROM PARTICIPATED_MEMBER PM JOIN ANSWER A
ON PM.P_MEMBER_ID = A.P_MEMBER_ID
WHERE PM.USER_ID = 100;

--------------------------------------------------------------------------------
SELECT *
FROM ANSWER_DETAIL A JOIN QUESTION Q
ON A.QUESTION_ID = Q.QUESTION_ID;








SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
		FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
		ON P.USER_ID = PM.USER_ID
		ON PM.RIDING_ID = R.RIDING_ID
		WHERE P.USER_ID = 2



SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
		FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
		ON P.USER_ID = PM.USER_ID
		ON PM.RIDING_ID = R.RIDING_ID
		WHERE P.USER_ID = 2;
        
SELECT PM.USER_ID AS USER_ID
		    ,P.NICKNAME AS NICKNAME
		FROM PARTICIPATED_MEMBER PM JOIN PROFILE P
		ON PM.USER_ID = P.USER_ID
		WHERE RIDING_ID = 1        

-- 2번회원의 응답 ID
SELECT ANSWER_ID
FROM PARTICIPATED_MEMBER PM JOIN ANSWER A
ON PM.P_MEMBER_ID = A.P_MEMBER_ID
WHERE PM.USER_ID = 2;

DESC CHECK_ATTENDANCE;
DESC ANSWER_ATTENDANCE;

SELECT *
FROM CHECK_ATTENDANCE;


ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH:MI:SS';

SELECT *
FROM ALL_CONSTRAINTS
WHERE CONSTRAINT_NAME = 'FK_P_MEMBER_TO_CK_ATTE';

SELECT *
FROM PARTICIPATED_MEMBER;

SELECT *
FROM MEMBER
ORDER BY USER_ID;
/*
60
61
62
63
64
65
66
67
68
69
*/
DESC PARTICIPATED_MEMBER;
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 60, 1, SYSDATE);


INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 61, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 62, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 63, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 64, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 65, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 66, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 67, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 68, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 69, 1, SYSDATE);


SELECT *
FROM CHECK_ATTENDANCE;

SELECT CHECK_ATTE_ID, USER_ID
		FROM CHECK_ATTENDANCE CA JOIN PARTICIPATED_MEMBER PM
		ON CA.P_MEMBER_ID = PM.P_MEMBER_ID
		WHERE PM.USER_ID = 13;
        
SELECT *
FROM ANSWER_ATTENDANCE;

COMMIT;


SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
		FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
		ON P.USER_ID = PM.USER_ID
		ON PM.RIDING_ID = R.RIDING_ID
		WHERE P.USER_ID = 60;
        

SELECT *
FROM PROFILE
WHERE USER_ID = 60;

SELECT *
FROM QUESTION;
SELECT *
FROM EVALUATE_TYPE;

SELECT E.E_TYPE_ID AS E_TYPE
FROM QUESTION Q JOIN EVALUATE_TYPE E
ON Q.E_TYPE_ID = E.E_TYPE_ID
WHERE Q.QUESTION_ID = 1;

SELECT ANSWER_ID, PM.USER_ID
		FROM PARTICIPATED_MEMBER PM JOIN ANSWER A
		ON PM.P_MEMBER_ID = A.P_MEMBER_ID
		WHERE PM.USER_ID = 2;
        
SELECT *
FROM MEMBER
ORDER BY 1;
--80 ~ 83

INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 80, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 81, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 82, 1, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 83, 1, SYSDATE);

COMMIT;

SELECT *
FROM PROFILE
WHERE USER_ID = 81;

SELECT CASE WHEN SYSDATE <= END_DATE +7 AND SYSDATE > START_DATE THEN 1
            ELSE 0
            END EVADATE
FROM RIDING
WHERE RIDING_ID = (SELECT RIDING_ID
                   FROM PARTICIPATED_MEMBER 
                   WHERE USER_ID = '82');

SELECT COUNT(*), USER_ID
FROM PARTICIPATED_MEMBER
GROUP BY(USER_ID);


SELECT *
FROM RIDING;

SELECT *
FROM PARTICIPATED_MEMBER;

SELECT *
FROM MEMBER
ORDER BY 1;


INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 40, 4, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 41, 4, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 42, 4, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 43, 4, SYSDATE);
INSERT INTO PARTICIPATED_MEMBER
VALUES(SEQ_PARTICIPATED_MEMBER.NEXTVAL, 44, 4, SYSDATE);

COMMIT;

SELECT CASE WHEN SYSDATE <= END_DATE +7 AND SYSDATE > START_DATE THEN 1
	            ELSE 0
	            END EVADATE
		FROM RIDING
		WHERE RIDING_ID = (SELECT RIDING_ID
		                   FROM PARTICIPATED_MEMBER 
		                   WHERE USER_ID = 40
		                   );
--0
SELECT CASE WHEN COUNT(*) = 0 THEN 0
            ELSE 1
            END LEADERCHECK
		FROM RIDING
		WHERE LEADER_ID = 40;
--0

SELECT QUESTION_ID , Q_CONTENT
		FROM QUESTION
		WHERE QUESTION_ID BETWEEN 1 AND 3 OR QUESTION_ID IN(7,8);

SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
		FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
		ON P.USER_ID = PM.USER_ID
		ON PM.RIDING_ID = R.RIDING_ID
		WHERE P.USER_ID = 40;

SELECT *
FROM RIDING;


SELECT R.RIDING_ID AS RIDING_ID,R.RIDING_NAME AS RIDING_NAME
FROM RIDING R JOIN PROFILE P JOIN PARTICIPATED_MEMBER PM
ON P.USER_ID = PM.USER_ID
ON PM.RIDING_ID = R.RIDING_ID
WHERE R.RIDING_ID = (SELECT RIDING_ID
                     FROM PARTICIPATED_MEMBER
                     WHERE USER_ID = 40);
                     

SELECT R.RIDING_ID AS RIDING_ID
      ,R.RIDING_NAME AS RIDING_NAME
FROM RIDING R JOIN PARTICIPATED_MEMBER PM
ON PM.RIDING_ID = R.RIDING_ID
WHERE R.RIDING_ID = (SELECT RIDING_ID
                     FROM PARTICIPATED_MEMBER
                     WHERE USER_ID = 40)
    AND PM.USER_ID=40;



SELECT USER_ID,NICKNAME
		FROM PROFILE
		WHERE USER_ID=40;

DELETE
FROM PROFILE
WHERE PROFILE_ID=57;

ROLLBACK;

COMMIT;
        
        
SELECT *
FROM ANSWER_ATTENDANCE;

SELECT *
FROM ANSWER_DETAIL;

SELECT *
FROM ANSWER
ORDER BY 3;

SELECT *
FROM CHECK_ATTENDANCE
ORDER BY 3;

SELECT QUESTION_ID , Q_CONTENT
		FROM QUESTION;

SELECT X.USER_ID, X.NICKNAME
FROM
(       
    SELECT *
    FROM ANSWER_DETAIL A JOIN PARTICIPATED_MEMBER P
    ON A.P_MEMBER_ID = P.P_MEMBER_ID
)S JOIN PROFILE X
ON S.USER_ID = X.USER_ID;


ON P.USER_ID = X.USER_ID;

SELECT CASE WHEN SYSDATE <= END_DATE +7 AND SYSDATE > START_DATE THEN 1
	            ELSE 0
	            END EVADATE
		FROM RIDING
		WHERE RIDING_ID = (SELECT RIDING_ID
		                   FROM PARTICIPATED_MEMBER 
		                   WHERE USER_ID = 40
		                   )















